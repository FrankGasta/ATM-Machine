#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <cstdlib> // For system("cls") and rand()
#include <ctime>   // For time()
#include <conio.h> // For _getch()
#include <iomanip> // For std::setw and std::setfill
#include <limits>  // For numeric_limits

using namespace std;

class Account {
public:
    string accNumber;
    string accName;
    string birthDay;
    string contactNumber;
    string pinCode; // This will be encrypted in practice
    double balance;

    Account() : balance(5000.0) {} // Initialize balance to 5000 PHP
};

// Simple XOR encryption for demonstration
string encryptPin(const string &pin) {
    string encrypted = pin;
    for (size_t i = 0; i < pin.length(); ++i) {
        encrypted[i] = pin[i] ^ 'A'; // XOR with a simple character
    }
    return encrypted;
}

string decryptPin(const string &encryptedPin) {
    string decrypted = encryptedPin;
    for (size_t i = 0; i < encryptedPin.length(); ++i) {
        decrypted[i] = encryptedPin[i] ^ 'A'; // XOR with the same character
    }
    return decrypted;
}

class MyATM {
public:
    // You can add ATM-related methods here if needed
};

class Transaction {
public:
    Account account; // Hold account details for transactions

    bool validateAccount(const string &inputAccNumber);
    void loadAccount(const string &inputAccNumber);
    void displayBalance();
    void transaction_withdraw();
    void transaction_deposit();
    void transaction_fundTransfer(MyATM &atm);
    void changePin();
    void transaction_menu(MyATM &atm);
};

class Registration {
public:
    void Register(MyATM &atm);
};

// New birthday input function
void getBirthdayInput(string &birthday) {
    char ch;
    birthday = "____-__-__"; // Initial format
    int pos = 0; // Position in the birthday string

    cout << "Enter Birthday (YYYY-MM-DD): " << birthday;

    while (pos < birthday.length()) {
        ch = _getch(); // Get a character without echoing it

        if (isdigit(ch)) { // Check if the character is a digit
            if (pos == 4 || pos == 7) {
                pos++; // Skip the '-' at positions 4 and 7
            }
            birthday[pos] = ch; // Replace the '_' with the digit
            pos++;
        } else if (ch == 8 && pos > 0) { // Handle backspace
            if (pos == 5 || pos == 8) {
                pos--; // Skip over the '-' if necessary
            }
            pos--; // Move back one position
            birthday[pos] = '_'; // Replace the digit with '_'
        }

        // Display the updated birthday string
        cout << "\rEnter Birthday (YYYY-MM-DD): " << birthday;
    }

    cout << endl; // Move to the next line after entering the birthday
}

void Registration::Register(MyATM &atm) {
    Account account;
    cout << "========== REGISTER ==========" << endl;

    // Generate a 5-digit account number
    account.accNumber = to_string(rand() % 100000); // Random number between 0 and 99999
    account.accNumber.insert(0, 5 - account.accNumber.length(), '0'); // Ensure it's 5 digits
    cout << "Generated Account Number: " << account.accNumber << endl;

    cout << "Enter Account Name: ";
    cin >> account.accName;

    // Use the new function for birthday input
    getBirthdayInput(account.birthDay);

    cout << "Enter Contact Number: ";
    cin >> account.contactNumber;

    cout << "Enter a 4-digit PIN Code: ";
    string pin;
    char ch; // Variable to store each character entered
    while (pin.length() < 4) {
        ch = _getch(); // Get a character without echoing it
        if (isdigit(ch)) { // Check if the character is a digit
            pin += ch; // Append the digit to the PIN
            cout << '*'; // Print an asterisk to mask the input
        } else if (ch == 8) { // Handle backspace
            if (!pin.empty()) {
                pin.pop_back(); // Remove last character from PIN
                cout << "\b \b"; // Move cursor back, print space to overwrite *, and move back again
            }
        }
    }
    cout << endl; // Move to the next line after entering the PIN

    account.pinCode = encryptPin(pin); // Encrypt the PIN code

    // Save account details to a file
    ofstream outfile("D:\\Bob\\Bob.txt", ios::app);
    if (outfile.is_open()) {
        outfile << account.accNumber << ","
                << account.accName << ","
                << account.birthDay << ","
                << account.contactNumber << ","
                << account.balance << ","
                << account.pinCode << "\n";
        outfile.close();
        cout << "Account successfully registered!" << endl;
    } else {
        cout << "Error opening file for writing!" << endl;
    }
    cout << "Press any key to continue..." << endl;
    _getch();
}

bool Transaction::validateAccount(const string &inputAccNumber) {
    ifstream infile("D:\\Bob\\Bob.txt");
    string line;
    bool accountFound = false;

    while (getline(infile, line)) {
        stringstream ss(line);
        getline(ss, account.accNumber, ','); // Read the account number
        if (account.accNumber == inputAccNumber) {
            accountFound = true;
            break;
        }
    }
    infile.close();
    return accountFound;
}

void Transaction::loadAccount(const string &inputAccNumber) {
    ifstream infile("D:\\Bob\\Bob.txt");
    if (infile.is_open()) {
        string line;
        while (getline(infile, line)) {
            stringstream ss(line);
            getline(ss, account.accNumber, ',');
            if (account.accNumber == inputAccNumber) {
                getline(ss, account.accName, ',');
                getline(ss, account.birthDay, ',');
                getline(ss, account.contactNumber, ',');
                ss >> account.balance;
                getline(ss, account.pinCode, ','); // Read the encrypted PIN
                break;
            }
        }
        infile.close();
    } else {
        cout << "Unable to open file" << endl;
    }
}

void Transaction::displayBalance() {
    cout << "Account Balance: PHP" << fixed << setprecision(2) << account.balance << endl;
    cout << "Press any key to continue..." << endl;
    _getch();
}

void Transaction::transaction_withdraw() {
    double amount;
    cout << "Enter amount to withdraw: ";
    cin >> amount;

    if (amount > account.balance) {
        cout << "Insufficient balance!" << endl;
    } else {
        account.balance -= amount;
        cout << "Withdrawal successful! New balance: PHP" << fixed << setprecision(2) << account.balance << endl;
    }
    cout << "Press any key to continue..." << endl;
    _getch();
}

void Transaction::transaction_deposit() {
    double amount;
    cout << "Enter amount to deposit: ";
    cin >> amount;

    account.balance += amount;
    cout << "Deposit successful! New balance: PHP" << fixed << setprecision(2) << account.balance << endl;
    cout << "Press any key to continue..." << endl;
    _getch();
}

void Transaction::transaction_fundTransfer(MyATM &atm) {
    string targetAccNumber;
    double amount;

    cout << "Enter target account number: ";
    cin >> targetAccNumber;

    if (!validateAccount(targetAccNumber)) {
        cout << "Target account not found!" << endl;
        cout << "Press any key to continue..." << endl;
        _getch();
        return;
    }

    cout << "Enter amount to transfer: ";
    cin >> amount;

    if (amount > account.balance) {
        cout << "Insufficient balance!" << endl;
    } else {
        account.balance -= amount;
        cout << "Transfer successful! New balance: PHP" << fixed << setprecision(2) << account.balance << endl;
    }
    cout << "Press any key to continue..." << endl;
    _getch();
}

void Transaction::changePin() {
    string newPin;
    char ch; // Variable to store each character entered

    cout << "Enter new 4-digit PIN Code: ";

    while (newPin.length() < 4) {
        ch = _getch(); // Get a character without echoing it
        if (isdigit(ch)) { // Check if the character is a digit
            newPin += ch; // Append the digit to the PIN
            cout << '*'; // Print an asterisk to mask the input
        } else if (ch == 8) { // Handle backspace
            if (!newPin.empty()) {
                newPin.pop_back(); // Remove last character from PIN
                cout << "\b \b"; // Move cursor back, print space to overwrite *, and move back again
            }
        }
    }
    cout << endl; // Move to the next line after entering the PIN

    account.pinCode = encryptPin(newPin); // Update the encrypted pinCode
    cout << "PIN changed successfully!" << endl;
    cout << "Press any key to continue..." << endl;
    _getch();
}

void Transaction::transaction_menu(MyATM &atm) {
    int choice;
    do {
        system("cls");
        cout << "========== TRANSACTION MENU ==========" << endl;
        cout << "1. View Balance" << endl;
        cout << "2. Withdraw" << endl;
        cout << "3. Deposit" << endl;
        cout << "4. Fund Transfer" << endl;
        cout << "5. Change PIN" << endl;
        cout << "0. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            displayBalance();
            break;
        case 2:
            transaction_withdraw();
            break;
        case 3:
            transaction_deposit();
            break;
        case 4:
            transaction_fundTransfer(atm);
            break;
        case 5:
            changePin();
            break;
        }
    } while (choice != 0);
}

int main() {
    srand(static_cast<unsigned int>(time(0))); // Seed the random number generator
    MyATM atm;
    Registration reg;
    Transaction trans;

    int choice;
    do {
        system("cls");
        cout << "========== ATM SIMULATION ==========" << endl;
        cout << "1. Register" << endl;
        cout << "2. Transaction" << endl;
        cout << "0. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            reg.Register(atm);
            break;
        case 2: {
            string inputAccNumber;
            cout << "Enter account number: ";
            cin >> inputAccNumber;

            if (trans.validateAccount(inputAccNumber)) {
                trans.loadAccount(inputAccNumber);
                trans.transaction_menu(atm);
            } else {
                cout << "Account not found!" << endl;
                cout << "Press any key to continue..." << endl;
                _getch();
            }
            break;
        }
        }
    } while (choice != 0);

    return 0;
}
