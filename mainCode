#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <conio.h>
#include <iomanip>
#include <limits>

using namespace std;

class Account {
public:
    string accNumber;
    string accName;
    string birthDay;
    string contactNumber;
    string pinCode;
    double balance;
};

string encryptPin(const string &pin) {
    string encrypted = pin;
    for (size_t i = 0; i < pin.length(); ++i) {
        encrypted[i] = pin[i] ^ 'A';
    }
    return encrypted;
}

string decryptPin(const string &encryptedPin) {
    return encryptPin(encryptedPin); // Same operation for decryption
}

class MyATM {
public:
    bool checkCard(const string &cardNumber);
};

bool MyATM::checkCard(const string &cardNumber) {
    ifstream SaveFile("D:\\Bob\\Bob.txt");
    if (!SaveFile.is_open()) {
        cout << "Error: Unable to open the card file!" << endl;
        return false;
    }

    string line;
    while (getline(SaveFile, line)) {
        if (line == cardNumber) {
            return true;
        }
    }
    return false;
}

class Transaction {
public:
    Account account;

    bool validateAccount(const string &inputAccNumber);
    void loadAccount(const string &inputAccNumber);
    void displayBalance();
    void transaction_withdraw();
    void transaction_deposit();
    void transaction_fundTransfer(MyATM &atm);
    void changePin();
    void transaction_menu(MyATM &atm);
    void saveAccountToFile();
};

class Registration {
public:
    void Register(MyATM &atm);
};

void getBirthdayInput(string &birthday) {
    char ch;
    birthday = "____-__-__";
    int pos = 0;

    cout << "\nEnter Birthday (YYYY-MM-DD): " << birthday;

    while (pos < birthday.length()) {
        ch = _getch();
        if (isdigit(ch)) {
            if (pos == 4 || pos == 7) {
                pos++;
            }
            birthday[pos] = ch;
            pos++;
        } else if (ch == 8 && pos > 0) {
            if (pos == 5 || pos == 8) {
                pos--;
            }
            pos--;
            birthday[pos] = '_';
        }

        cout << "\r\rEnter Birthday (YYYY-MM-DD): " << birthday;
    }

    cout << endl;
}

void Registration::Register(MyATM &atm) {
    Account account;
    system("cls");
    cout << "\t\t\t __________              .__          __                " << endl;
    cout << "\t\t\t\\______   \\ ____   ____ |__| _______/  |_  ___________ " << endl;
    cout << "\t\t\t |       _// __ \\ / ___\\|  |/  ___/\\   __\\/ __ \\_  __ \\" << endl;
    cout << "\t\t\t |    |   \\  ___// /_/  >  |\\___ \\  |  | \\  ___/|  | \\/" << endl;
    cout << "\t\t\t |____|_  /\\___  >___  /|__/____  > |__|  \\___  >__|   " << endl;
    cout << "\t\t\t        \\/     \\/_____/         \\/            \\/       \n" << endl;

    account.accNumber = to_string(rand() % 100000);
    account.accNumber.insert(0, 5 - account.accNumber.length(), '0');
    cout << "\t\t\t\t*--------------------------------*" << endl;
    cout << "\t\t\t\tGenerated Account Number: " << account.accNumber << endl;
    cout << "\t\t\t\t*--------------------------------*" << endl;

    cout << "\nEnter Account Name: ";
    cin >> account.accName;

    getBirthdayInput(account.birthDay);

    cout << "\nEnter Contact Number: ";
    cin >> account.contactNumber;

    cout << "\nEnter a 4-digit PIN Code: ";
    string pin;
    char ch;
    while (pin.length() < 4) {
        ch = _getch();
        if (isdigit(ch)) {
            pin += ch;
            cout << '*';
        } else if (ch == 8) {
            if (!pin.empty()) {
                pin.pop_back();
                cout << "\b \b";
            }
        }
    }
    cout << endl;

    account.pinCode = encryptPin (pin);

    // Set balance only when creating a new account
    account.balance = 5000.0;

    ofstream atmFile("D:\\Bob\\Bob.txt", ios::app);
    if (atmFile.is_open()) {
        atmFile << account.accNumber << ","
                << account.accName << ","
                << account.birthDay << ","
                << account.contactNumber << ","
                << account.balance << ","
                << account.pinCode << "\n";
        atmFile.close();
        cout << "\t\t\t\t\t*------------------------------*" << endl;
        cout << "\t\t\t\t\tAccount successfully registered!" << endl;
        cout << "\t\t\t\t\t*------------------------------*\n\n" << endl;
    } else {
        cout << "\t\t\t\t\t*------------------------------*" << endl;
        cout << "\t\t\t\t\tError...No Card Found" << endl;
        cout << "\t\t\t\t\t*------------------------------*\n\n" << endl;
    }
    cout << "\t\t\t\t\t*------------------------------*" << endl;
    cout << "\t\t\t\t\tPress any key to continue..." << endl;
    cout << "\t\t\t\t\t*------------------------------*\n\n" << endl;
    _getch();
}

bool Transaction::validateAccount(const string &inputAccNumber) {
    ifstream SaveFile("D:\\Bob\\Bob.txt");
    if (!SaveFile.is_open()) {
        cout << "Error: Unable to open the account file!" << endl;
        return false;
    }

    string line;
    while (getline(SaveFile, line)) {
        stringstream ss(line);
        getline(ss, account.accNumber, ',');

        if (account.accNumber == inputAccNumber) {
            return true;
        }
    }
    SaveFile.close();
    return false;
}

void Transaction::loadAccount(const string &inputAccNumber) {
    ifstream SaveFile("D:\\Bob\\Bob.txt");
    if (!SaveFile.is_open()) {
        cout << "Error: Unable to open the account file!" << endl;
        return;
    }

    string line;
    while (getline(SaveFile, line)) {
        stringstream ss(line);
        getline(ss, account.accNumber, ',');

        if (account.accNumber == inputAccNumber) {
            getline(ss, account.accName, ',');
            getline(ss, account.birthDay, ',');
            getline(ss, account.contactNumber, ',');
            ss >> account.balance;
            getline(ss, account.pinCode, ',');
            break;
        }
    }
    SaveFile.close();
}

void Transaction::displayBalance() {
    cout << "\t\t\t\t\t*------------------------------*" << endl;
    cout << "\t\t\t\t\tAccount Balance: PHP " << fixed << setprecision(2) << account.balance << endl;
    cout << "\t\t\t\t\t*------------------------------*\n\n" << endl;

    cout << "Press any key to continue..." << endl;
    _getch();
}

void Transaction::transaction_withdraw() {
    double amount;

    cout << "\t\t\t\t\t*------------------------------*" << endl;
    cout << "\t\t\t\t\tEnter amount to withdraw: ";
    cin >> amount;
    cout << "\t\t\t\t\t*------------------------------*\n\n" << endl;

    if (amount > account.balance) {
        cout << "\t\t\t\t\t*------------------------------*" << endl;
        cout << "\t\t\t\t\tInsufficient balance!" << endl;
        cout << "\t\t\t\t\t*------------------------------*\n\n" << endl;
        cout << "Press any key to continue..." << endl;
        cin.ignore();
        cin.get();
        return;
    }

    account.balance -= amount;
    cout << "\t\t\t\t\t*-----------------------------------*" << endl;
    cout << "\t\t\t\t\tWithdrawal successful! New balance: PHP " << fixed << setprecision(2) << account.balance << endl;
    cout << "\t\t\t\t\t*-----------------------------------*\n\n" << endl;

    saveAccountToFile();
    cout << "Press any key to continue..." << endl;
    cin.ignore();
    cin.get();
}

void Transaction::transaction_deposit() {
    double amount;
    cout << "\t\t\t\t\t*------------------------------*" << endl;
    cout << "\t\t\t\t\tEnter amount to deposit: ";
    cin >> amount;
    cout << "\t\t\t\t\t*------------------------------*\n\n" << endl;

    account.balance += amount;
    cout << "\t\t\t\t\t*----------------------------------*" << endl;
    cout << "\t\t\t\t\tDeposit successful! New balance: PHP " << fixed << setprecision(2) << account.balance << endl;
    cout << "\t\t\t\t\t*----------------------------------*\n\n" << endl;

    saveAccountToFile();
    cout << "Press any key to continue..." << endl;
    _getch();
}

void Transaction::saveAccountToFile() {
    ofstream tempFile("D:\\Bob\\Temp.txt");
    if (!tempFile.is_open()) {
        cout << "Error opening temporary file for writing!" << endl;
        return;
    }

    ifstream inputFile("D:\\Bob\\Bob.txt");
    if (!inputFile.is_open()) {
        cout << "Error opening original account file!" << endl;
        tempFile.close();
        return;
    }

    string line;
    while (getline(inputFile, line)) {
        stringstream ss(line);
        string accNum;
        getline(ss, accNum, ',');

        if (accNum == account.accNumber) {
            tempFile << accNum << ","
                      << account.accName << ","
                      << account.birthDay << ","
                      << account.contactNumber << ","
                      << fixed << setprecision(2) << account.balance << ","
                      << account.pinCode << "\n";
        } else {
            tempFile << line << "\n";
        }
    }

    inputFile.close();
    tempFile.close();

    if (remove("D:\\Bob\\Bob.txt") != 0) {
        cout << "Error deleting original file!" << endl;
        return;
    }

    if (rename("D:\\Bob\\Temp.txt", "D:\\Bob\\Bob.txt") != 0) {
        cout << "Error renaming temporary file!" << endl;
        return;
    }
}

void Transaction::transaction_fundTransfer(MyATM &atm) {
    string targetAccNumber;
    double amount;

    cout << "\t\t\t\t\t*------------------------------*" << endl;
    cout << "\t\t\t\t\tEnter target account number: ";
    cin >> targetAccNumber;
    cout << "\t\t\t\t\t*------------------------------*\n\n" << endl;

    if (!validateAccount(targetAccNumber)) {
        cout << "\t\t\t\t\t*------------------------------*" << endl;
        cout << "\t\t\t\t\tTarget account not found!" << endl;
        cout << "\t\t\t\t\t*------------------------------*\n\n" << endl;
        cout << "Press any key to continue..." << endl;
        _getch();
        return;
    }

    cout << "\t\t\t\t\t*------------------------------*" << endl;
    cout << "\t\t\t\t\tEnter amount to transfer: ";
    cin >> amount;
    cout << "\t\t\t\t\t*------------------------------*\n\n" << endl;

    if (amount > account.balance) {
        cout << "\t\t\t\t\t*------------------------------*" << endl;
        cout << "\t\t\t\t\tInsufficient balance!" << endl;
        cout << "\t\t\t\t\t*------------------------------*\n\n" << endl;
        cout << "Press any key to continue..." << endl;
        _getch();
        return;
    }

    account.balance -= amount;

    ifstream inputFile("D:\\Bob\\Bob.txt");
    ofstream tempFile("D:\\Bob\\Temp.txt");

    if (!inputFile.is_open() || !tempFile.is_open()) {
        cout << "Error opening files !" << endl;
        return;
    }

    string line;
    bool targetAccountFound = false;

    while (getline(inputFile, line)) {
        stringstream ss(line);
        string accNum;
        getline(ss, accNum, ',');

        if (accNum == targetAccNumber) {
            Account targetAccount;
            targetAccount.accNumber = accNum;
            getline(ss, targetAccount.accName, ',');
            getline(ss, targetAccount.birthDay, ',');
            getline(ss, targetAccount.contactNumber, ',');
            ss >> targetAccount.balance;
            getline(ss, targetAccount.pinCode, ',');

            targetAccount.balance += amount;
            targetAccountFound = true;

            tempFile << accNum << ","
                      << targetAccount.accName << ","
                      << targetAccount.birthDay << ","
                      << targetAccount.contactNumber << ","
                      << fixed << setprecision(2) << targetAccount.balance << ","
                      << targetAccount.pinCode << "\n";
        } else if (accNum == account.accNumber) {
            tempFile << accNum << ","
                      << account.accName << ","
                      << account.birthDay << ","
                      << account.contactNumber << ","
                      << fixed << setprecision(2) << account.balance << ","
                      << account.pinCode << "\n";
        } else {
            tempFile << line << "\n";
        }
    }

    inputFile.close();
    tempFile.close();

    if (remove("D:\\Bob\\Bob.txt") != 0) {
        cout << "Error deleting original file!" << endl;
        return;
    }

    if (rename("D:\\Bob\\Temp.txt", "D:\\Bob\\Bob.txt") != 0) {
        cout << "Error renaming temporary file!" << endl;
        return;
    }

    cout << "\t\t\t\t\tTransfer successful! New balance: PHP " << fixed << setprecision(2) << account.balance << endl;
    cout << "Press any key to continue..." << endl;
    _getch();
}

void Transaction::changePin() {
    string newPin;
    char ch;

    cout << "\t\t\t\t\t*------------------------------*" << endl;
    cout << "\t\t\t\t\tEnter new 4-digit PIN Code: ";

    while (newPin.length() < 4) {
        ch = _getch();
        if (isdigit(ch)) {
            newPin += ch;
            cout << '*';
        } else if (ch == 8) {
            if (!newPin.empty()) {
                newPin.pop_back();
                cout << "\b \b";
            }
        }
    }
    cout << endl;

    account.pinCode = encryptPin(newPin);
    cout << "\n\n\t\t\t\t\t*------------------------------*" << endl;
    cout << "\t\t\t\t\tPIN changed successfully!" << endl;
    cout << "\t\t\t\t\t*------------------------------*\n\n" << endl;

    saveAccountToFile();
    cout << "Press any key to continue..." << endl;
    _getch();
}

void Transaction::transaction_menu(MyATM &atm) {
    int choice;
    do {
        system("cls");
        cout << "\t ________                                        __________                 ______  ___                   " << endl;
        cout << "\t ___  __/____________ ____________________ ________  /___(_)____________    ___   |/  /_______________  __" << endl;
        cout << "\t __  /  __  ___/  __ `/_  __ \\_  ___/  __ `/  ___/  __/_  /_  __ \\_  __ \\   __  /|_/ /_  _ \\_  __ \\  / / /" << endl;
        cout << "\t _  /   _  /   / /_/ /_  / / /(__  )/ /_/ // /__ / /_ _  / / /_/ /  / / /   _  /  / / /  __/  / / / /_/ / " << endl;
        cout << "\t _/    /_/    \\__,_/ /_/ /_//____/ \\__,_/ \\___/ \\__/ /_/  \\____//_/ /_/    /_/  /_/  \\___//_/ /_/\\__,_/  \n\n" << endl;

        cout << "\t\t\t\t*-----------------------*     *-----------------------*" << endl;
        cout << "\t\t\t\t|   1. View Balance     |     |   4. Fund Transfer    |" << endl;
        cout << "\t\t\t\t|   2. Withdraw         |     |   5. Change Pin       |" << endl;
        cout << "\t\t\t\t|   3. Deposit          |     |   0. Exit             |" << endl;
        cout << "\t\t\t\t*-----------------------*     *-----------------------*\n\n" << endl;

        cout << "*--------------------------------*" << endl;
        cout << "\tEnter your choice: ";
        cin >> choice;
        cout << "*--------------------------------*\n\n" << endl;
        switch (choice) {
        case 1:
            displayBalance();
            break;
        case 2:
            transaction_withdraw();
            break;
        case 3:
            transaction_deposit();
            break;
        case 4:
            transaction_fundTransfer(atm);
            break;
        case 5:
            changePin();
            break;
        }
    } while (choice != 0);
}

int main() {
    system("color 8F");
    srand(static_cast<unsigned int>(time(0)));
    MyATM atm;
    Registration reg;
    Transaction trans;

    int choice;
    do {
        system("cls");
        cout << "\t\t\t\t\t$$$$$$$$\\  $$\\   $$\\ $$$$$$$$\\ " << endl;
        cout << "\t\t\t\t\t$$  __$$\\ $$$\\  $$ |$$  _____| " << endl;
        cout << "\t\t\t\t\t$$ |  $$ |$$$$\\ $$ |$$ |       " << endl;
        cout << "\t\t\t\t\t$$$$$$$$ |$$ $$\\$$ |$$$$$\\     " << endl;
        cout << "\t\t\t\t\t$$  __$$\\ $$ \\$$$$ |$$  __|    " << endl;
        cout << "\t\t\t\t\t$$ |  $$ |$$ |\\$$$ |$$ |       " << endl;
        cout << "\t\t\t\t\t$$$$$$$$ |$$ | \\$$ |$$ |       " << endl;
        cout << "\t\t\t\t\t\\_______/ \\__|  \\__|\\__|       \n\n" << endl;

        cout << "\t\t\t.----------------------------------------------------------------." << endl;
        cout << "\t\t\t| ____           ______               __         __               |" << endl;
        cout << "\t\t\t||_   |         |   __ \\ .-----.-----.|__|.-----.|  |_.-----.----.|" << endl;
        cout << "\t\t\t| _|  |_ __     |      < |  -__|  _  ||  ||__ --||   _|  -__|   _||" << endl;
        cout << "\t\t\t||______|__|    |___|__||_____|___  ||__||_____||____|_____|__|   |" << endl;
        cout << "\t\t\t|                             |_____|                             |" << endl;
        cout << "\t\t\t'-----------------------------------------------------------------'\n" << endl;

        cout << "\t\t\t.---------------------------------------------------------------------------------." << endl;
        cout << "\t\t\t| ______         _______                                     __   __              |" << endl;
        cout << "\t\t\t||__    |       |_     _|.----.---.-.-----.-----.---.-.----.|  |_|__|.-----.-----.|" << endl;
        cout << "\t\t\t||    __|__       |   |  |   _|  _  |     |__ --|  _  |  __||   _|  ||  _  |     ||" << endl;
        cout << "\t\t\t||______|__|      |___|  |__| |___._|__|__|_____|___._|____||____|__||_____|__|__||" << endl;
        cout << "\t\t\t'---------------------------------------------------------------------------------'\n" << endl;

        cout << "\t\t\t.-------------------------------- --------." << endl;
        cout << "\t\t\t| ______         _______         __ __   |" << endl;
        cout << "\t\t\t||      |       |    ___|.--.--.|__|  |_ |" << endl;
        cout << "\t\t\t||  --  |__     |    ___||_   _||  |   _||" << endl;
        cout << "\t\t\t||______|__|    |_______||__.__||__|____||" << endl;
        cout << "\t\t\t'----------------------------------------'\n\n" << endl;

        cout << "*---------------------------------*" << endl;
        cout << "\tEnter your choice: ";
        cin >> choice;
        cout << "*---------------------------------*\n\n" << endl;

        switch (choice) {
        case 1:
            reg.Register(atm);
            break;
        case 2: {
            string inputAccNumber;
            cout << "*---------------------------------*" << endl;
            cout << "\tEnter account number: ";
            cin >> inputAccNumber;
            cout << "*---------------------------------*\n\n" << endl;

            if (trans .validateAccount(inputAccNumber)) {
                trans.loadAccount(inputAccNumber);
                trans.transaction_menu(atm);
            } else {
                cout << "Account not found!" << endl;
                cout << "Press any key to continue..." << endl;
                _getch();
            }
            break;
        }
        }
    } while (choice != 0);

    return 0;
}
